(setenv "LSP_USE_PLISTS" "true")(setq gc-cons-threshold 120000000)(setq read-process-output-max (* 1024 1024))(setq comp-async-report-warnings-errors nil) ;; Mute the native comp warnings(require 'package)(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/"))(package-initialize)(unless (package-installed-p 'use-package)  (package-refresh-contents)  (package-install 'use-package))(setq use-package-always-ensure t)(setq use-package-expand-minimally t)(setq package-native-compile t)(tool-bar-mode -1)(tooltip-mode -1)(menu-bar-mode -1)(scroll-bar-mode -1)(blink-cursor-mode -1)(setq-default mode-line-format nil)(setq scroll-margin 7)(setq line-spacing 6)(setq make-backup-files nil)(setq auto-save-default nil)(setq inhibit-startup-message t)(setq custom-file (concat user-emacs-directory "/custom.el"))(global-set-key (kbd "<escape>") 'keyboard-escape-quit);; ;; Transperancy;; (set-frame-parameter (selected-frame) 'alpha '(93 . 50));;  (add-to-list 'default-frame-alist '(alpha . (93 . 50)));; Maximized(add-to-list 'initial-frame-alist '(fullscreen . maximized))(add-to-list 'default-frame-alist '(fullscreen . maximized));; Horizontal padding(set-fringe-mode 30)(set-face-attribute 'default nil :font "Liga SFMono Nerd Font" :height 170 :weight 'extra-light)(use-package evil  :init  (setq evil-want-C-u-scroll t)  (setq evil-echo-state nil)  (setq evil-default-cursor t)  (setq evil-vsplit-window-right t)  (setq evil-want-keybinding nil)  (setq evil-vsplit-window-right t)  :config  (evil-mode 1)  (evil-set-leader 'normal (kbd "SPC")))(use-package general)(general-create-definer leader  :keymaps 'normal  :prefix "<leader>")(leader  "t" '(:ignore t :which-key "Toggle")  "tn" '(display-line-numbers-mode :which-key "Line numbers"))(leader  "f"  '(:ignore t :which-key "File")  "fs" '(save-buffer :which-key "Save file")  "fe" '(eval-buffer :which-key "Eval buffer"))(leader "w" '(evil-window-map :which-key "Window")) ;; TODO remove C-w prefix(leader "b" '(:ignore t :which-key "Buffer"))(use-package evil-escape  :after evil  :init  (setq-default evil-escape-key-sequence "jk")  :config  (evil-escape-mode 1))(use-package evil-surround  :after evil  :config  (global-evil-surround-mode 1))(use-package evil-nerd-commenter  :after evil  :general  (general-define-key   :states '(normal visual)   :prefix "gc"   "c" '(evilnc-comment-or-uncomment-lines :which-key "Comment lines")   "p" '(evilnc-comment-or-uncomment-paragraphs :which-key "Comment paragraphs")))(use-package evil-snipe  :after evil  :init  (setq evil-snipe-scope 'buffer)  :config  (evil-snipe-mode 1))(use-package evil-collection  :after evil  :config  (evil-collection-init))(use-package smartparens   :config  (smartparens-global-mode))(use-package doom-themes  :config  (load-theme 'doom-one t))(use-package doom-modeline  :init  (setq doom-modeline-height 15)  (setq doom-modeline-major-mode-icon nil)  (setq doom-modeline-buffer-encoding nil)  :config  (doom-modeline-mode 1))(use-package all-the-icons :if (display-graphic-p))(use-package rainbow-delimiters  :hook (prog-mode . rainbow-delimiters-mode))(use-package which-key  :init (which-key-mode 1)  :config  (setq which-key-idle-delay 0.3))(use-package dashboard  :init  (setq dashboard-center-content t)  :config  (dashboard-setup-startup-hook))(use-package highlight-indent-guides  :init  (setq highlight-indent-guides-method 'character)  :hook  (prog-mode . highlight-indent-guides-mode))(use-package counsel  :init  (setq ivy-use-virtual-buffers t)  (setq ivy-count-format "")  :general  (leader "ff" '(counsel-find-file :which-key "Find file"))  (leader "tt" '(counsel-load-theme :which-key "Change theme"))  :config  (evil-define-key 'normal 'global (kbd ":") 'counsel-M-x))  (counsel-mode) ;;For some reason this dont work in the config section(use-package all-the-icons-ivy  :after '(all-the-icons counsel)  :init (add-hook 'after-init-hook 'all-the-icons-ivy-setup))(use-package magit  :commands magit-status  :general  (leader    "g"  '(:ignore t :which-key "Git")    "gg" '(magit-status :which-key "Interface"))  :custom  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))(use-package tree-sitter  :hook (lsp-mode . tree-sitter-hl-mode))(use-package tree-sitter-langs  :after tree-sitter)(use-package lsp-mode  :commands (lsp lsp-deferred)  :init  (setq lsp-ui-doc-show-with-cursor nil)  (setq lsp-ui-sideline-enable nil)  (setq lsp-headerline-breadcrumb-enable nil)  (setq lsp-keymap-prefix nil)  (setq lsp-log-io nil)  (setq lsp-auto-execute-action nil))(use-package lsp-ui  :commands lsp-ui-mode  :init  (setq lsp-ui-sideline-enable t)  :hook (lsp-mode . lsp-ui-mode))(use-package typescript-mode  :mode ("\\.ts" "\\.tsx" "\\.js" "\\.jsx")  :init  (setq typescript-indent-level 2))(use-package prettier  :after typescript-mode  :hook (typescript-mode . prettier-mode))(use-package csharp-mode  :config  (add-to-list 'auto-mode-alist '("\\.cs\\'" . csharp-tree-sitter-mode)))(use-package flycheck  :disabled t)(use-package company  :after lsp-mode  :hook (lsp-mode . company-mode)         (elisp-mode . company-mode)  :bind (:map company-active-map	 ("<right>" . company-complete-selection))	(:map lsp-mode-map	 ("<right>" . company-indent-or-complete-common))  :custom  (company-minimum-prefix-length 1)  (company-idle-delay 0.0))(use-package company-box  :after company  :hook (company-mode . company-box-mode))(use-package yasnippet  :disabled t)(use-package harpoon ;; TODO configure  :disabled t  :general  (leader    "m"  '(:ignore t :which-key "Harpoon")    "mm" '(harpoon-toggle-quick-menu :which-key "Harpoon menu")))(use-package justl ;; TODO no evil support config later  :disabled t)(use-package helpful  :commands (helpful-variable helpful-function helpful-at-point)  :general  (leader    "h"  '(:ignore t :which-key "Help")    "hv" '(helpful-variable :which-key "Describe variable")    "hf" '(helpful-function :which-key "Describe function")    "hp" '(describe-package :which-key "Describe package")    "ha" '(helpful-at-point :which-key "Describe point")))(use-package projectile  :config  (projectile-mode 1)  :general  (leader    "p"   '(:ignore t :which-key "Projects")    "pp"  '(counsel-projectile-switch-project :which-key "Switch project")    "."   '(counsel-projectile-switch-to-buffer :which-key "Switch project buffer")    "SPC" '(counsel-projectile-find-file :which-key "Find file in project")    "cf"  '(counsel-projectile-rg :which-key "Find file in project")    "pt"  '(projectile-test-project :which-key "Run tests")    "pR"  '(projectile-run-shell-command-in-root :which-key "Run shell command in root")    "pr"  '(projectile-run-project :which-key "Run project")    "pf"  '(projectile-dired :which-key "Project files")    "pT"  '(projectile-toggle-implementation-and-test :which-key "Switch to test or impl")))(use-package counsel-projectile  :after projectile  :config  (counsel-projectile-mode 1))(use-package org  :disabled t  :config  (doom-themes-org-config))